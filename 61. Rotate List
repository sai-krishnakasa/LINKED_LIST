Given the head of a linked list, rotate the list to the right by k places.

 Diagrams at: https://leetcode.com/problems/rotate-list/

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

SOLUTION:
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        n=slow=fast=head
        c=0
        if(k==0):
            return head
        while(n):
            c+=1
            n=n.next
        if(c==0):
            return head
        k=k%c
        for _ in range(k):
            fast=fast.next
        while(fast.next):
            fast=fast.next
            slow=slow.next
        fast.next=head
        head=slow.next
        slow.next=None
        return head
